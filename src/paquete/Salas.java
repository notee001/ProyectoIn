package paquete;

import Conexion.ConexionDB;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class Salas extends javax.swing.JPanel {

    /**
     * Creates new form SalasAdmins
     */
    public Salas() {
        DefaultTableModel model = new DefaultTableModel();
        initComponents();
        Consulta();
        llenarCombo();
        TUbi.setForeground(Color.gray);
        THard.setForeground(Color.gray);
        MatNom.setForeground(Color.gray);
        MatDes.setForeground(Color.gray);
    }

    /** 
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        panelRound1 = new Clases.PanelRound();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        SaNue = new javax.swing.JButton();
        TUbi = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        THard = new javax.swing.JTextArea();
        ComMat = new javax.swing.JComboBox<>();
        MatNue = new javax.swing.JButton();
        MatNom = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        MatDes = new javax.swing.JTextArea();
        BotMat = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(450, 430));
        setPreferredSize(new java.awt.Dimension(490, 430));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelRound1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ubicacion", "Calificacion"
            }
        ));
        jScrollPane2.setViewportView(Tabla);

        panelRound1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 250, 350));

        jScrollPane1.setViewportView(panelRound1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 260, 360));

        SaNue.setText("Nueva");
        SaNue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SaNueMouseClicked(evt);
            }
        });
        SaNue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaNueActionPerformed(evt);
            }
        });
        add(SaNue, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 150, 150, -1));

        TUbi.setText("Ubicación");
        TUbi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TUbiMouseClicked(evt);
            }
        });
        add(TUbi, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 150, -1));

        THard.setColumns(10);
        THard.setRows(5);
        THard.setText("Hardware");
        THard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                THardMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(THard);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 40, 150, 100));

        ComMat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Material" }));
        add(ComMat, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 180, 150, -1));

        MatNue.setText("Nuevo");
        MatNue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MatNueMouseClicked(evt);
            }
        });
        add(MatNue, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 346, 150, -1));

        MatNom.setText("Nombre");
        MatNom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MatNomMouseClicked(evt);
            }
        });
        MatNom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MatNomActionPerformed(evt);
            }
        });
        add(MatNom, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 240, 150, -1));

        MatDes.setColumns(10);
        MatDes.setRows(5);
        MatDes.setText("Descripcion");
        MatDes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MatDesMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(MatDes);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 270, 150, 70));

        BotMat.setText("Agregar");
        BotMat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotMatMouseClicked(evt);
            }
        });
        BotMat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotMatActionPerformed(evt);
            }
        });
        add(BotMat, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 210, 150, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void SaNueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaNueActionPerformed
        String Ubi = TUbi.getText();
        String Hard = THard.getText();
        String sqlVerificar = "SELECT Ubicacion FROM Sala WHERE Ubicacion = ?";
        try (Connection con = ConexionDB.obtenerConexion();
            PreparedStatement ptmt = con.prepareStatement(sqlVerificar)) {

            ptmt.setString(1, Ubi);
            try (ResultSet rs = ptmt.executeQuery()) {
                if (rs.next()) {
                    JOptionPane.showMessageDialog(this, "La sala ya está registrada");
                    return;  // Detiene el proceso si ya existe
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Salas.class.getName()).log(Level.SEVERE, null, ex);
        }
        String sqlInsert = "INSERT INTO Sala (Ubicacion, Hardware) VALUES (?, ?)";
        try (Connection conn = ConexionDB.obtenerConexion();
            PreparedStatement pstmt = conn.prepareStatement(sqlInsert)) {

            pstmt.setString(1, Ubi);
            pstmt.setString(2, Hard);

            int filasInsertadas = pstmt.executeUpdate();

            if (filasInsertadas > 0) {
                JOptionPane.showMessageDialog(this, "Sala registrada exitosamente");
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo registrar la sala");
                }
            }
        catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error de base de datos: " + ex.getMessage());
        }
    }//GEN-LAST:event_SaNueActionPerformed

    private void TUbiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TUbiMouseClicked
        if(TUbi.getText().equals("Ubicación")){
            TUbi.setText("");
            TUbi.setForeground(Color.black);
        }
        if(THard.getText().isEmpty()){
            THard.setText("Hardware");
            THard.setForeground(Color.gray);
        }
        if(MatNom.getText().isEmpty()){
            MatNom.setText("Nombre");
            MatNom.setForeground(Color.gray);
        }
        if(MatDes.getText().isEmpty()){
            MatDes.setText("Descripcion");
            MatDes.setForeground(Color.gray);
        }
    }//GEN-LAST:event_TUbiMouseClicked

    private void THardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_THardMouseClicked
        if(THard.getText().equals("Hardware")){
            THard.setText("");
            THard.setForeground(Color.black);
        }
        if(TUbi.getText().isEmpty()){
            TUbi.setText("Ubicación");
            TUbi.setForeground(Color.gray);
        }
        if(MatNom.getText().isEmpty()){
            MatNom.setText("Nombre");
            MatNom.setForeground(Color.gray);
        }
        if(MatDes.getText().isEmpty()){
            MatDes.setText("Descripcion");
            MatDes.setForeground(Color.gray);
        }
        
    }//GEN-LAST:event_THardMouseClicked

    private void MatNomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MatNomMouseClicked
        if(MatNom.getText().equals("Nombre")){
            MatNom.setText("");
            MatNom.setForeground(Color.black);
        }
        if(TUbi.getText().isEmpty()){
            TUbi.setText("Ubicación");
            TUbi.setForeground(Color.gray);
        }
        if(THard.getText().isEmpty()){
            THard.setText("Hardware");
            THard.setForeground(Color.gray);
        }
        if(MatDes.getText().isEmpty()){
            MatDes.setText("Descripcion");
            MatDes.setForeground(Color.gray);
        }
    }//GEN-LAST:event_MatNomMouseClicked

    private void MatDesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MatDesMouseClicked
        if(MatDes.getText().equals("Descripcion")){
            MatDes.setText("");
            MatDes.setForeground(Color.black);
        }
        if(TUbi.getText().isEmpty()){
            TUbi.setText("Ubicación");
            TUbi.setForeground(Color.gray);
        }
        if(THard.getText().isEmpty()){
            THard.setText("Hardware");
            THard.setForeground(Color.gray);
        }
        if(MatNom.getText().isEmpty()){
            MatNom.setText("Nombre");
            MatNom.setForeground(Color.gray);
        }
    }//GEN-LAST:event_MatDesMouseClicked

    private void SaNueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SaNueMouseClicked
        String Ubi = TUbi.getText();
        String Hard = THard.getText();
        String sqlVerificar = "SELECT Ubicacion FROM Sala WHERE Ubicacion = ?";
        try (Connection con = ConexionDB.obtenerConexion();
            PreparedStatement ptmt = con.prepareStatement(sqlVerificar)) {

            ptmt.setString(1, Ubi);
            try (ResultSet rs = ptmt.executeQuery()) {
                if (rs.next()) {
                    JOptionPane.showMessageDialog(this, "La sala ya está registrada");
                    return;  // Detiene el proceso si ya existe
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Salas.class.getName()).log(Level.SEVERE, null, ex);
        }
        String sqlInsert = "INSERT INTO Sala (Ubicacion, Hardware) VALUES (?, ?)";
        try (Connection conn = ConexionDB.obtenerConexion();
            PreparedStatement pstmt = conn.prepareStatement(sqlInsert)) {

            pstmt.setString(1, Ubi);
            pstmt.setString(2, Hard);

            int filasInsertadas = pstmt.executeUpdate();

            if (filasInsertadas > 0) {
                JOptionPane.showMessageDialog(this, "La sala fue registrada exitosamente");
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo registrar la sala");
                }
            }
        catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error de base de datos: " + ex.getMessage());
        }
    }//GEN-LAST:event_SaNueMouseClicked

    private void BotMatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotMatMouseClicked
    // Validar que haya selección
    String materialSeleccionado = (String) ComMat.getSelectedItem();
    int filaSeleccionada = Tabla.getSelectedRow();

    if (materialSeleccionado == null || filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(null, "Debe seleccionar un material y una sala.");
        return;
    }

    String ubicacionSala = Tabla.getValueAt(filaSeleccionada, 0).toString(); // Asegúrate que sea la columna de ubicación

    try {
        Connection conn = ConexionDB.obtenerConexion();

        // 1. Obtener el ID del material seleccionado
        String sqlId = "SELECT ID FROM Materiales WHERE Nombre = ?";
        PreparedStatement pstmtId = conn.prepareStatement(sqlId);
        pstmtId.setString(1, materialSeleccionado);
        ResultSet rs = pstmtId.executeQuery();

        if (rs.next()) {
            int idMaterial = rs.getInt("ID");

            // 2. Insertar en MaterialSala
            String sqlInsert = "INSERT INTO MaterialSala (ID_material, Ubi_sala) VALUES (?, ?)";
            PreparedStatement pstmtInsert = conn.prepareStatement(sqlInsert);
            pstmtInsert.setInt(1, idMaterial);
            pstmtInsert.setString(2, ubicacionSala);

            int filas = pstmtInsert.executeUpdate();
            if (filas > 0) {
                JOptionPane.showMessageDialog(null, "Material asignado correctamente a la sala.");
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo asignar el material.");
            }

            pstmtInsert.close();
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró el ID del material.");
        }

        rs.close();
        pstmtId.close();
        conn.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al asignar material: " + e.getMessage());
    }
    
    }//GEN-LAST:event_BotMatMouseClicked

    private void MatNomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MatNomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MatNomActionPerformed

    private void BotMatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotMatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BotMatActionPerformed

    private void MatNueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MatNueMouseClicked
        String Ubi = MatNom.getText();
        String Hard = MatDes.getText();
        String sqlVerificar = "SELECT Nombre FROM Materiales WHERE Nombre = ?";
        try (Connection con = ConexionDB.obtenerConexion();
            PreparedStatement ptmt = con.prepareStatement(sqlVerificar)) {

            ptmt.setString(1, Ubi);
            try (ResultSet rs = ptmt.executeQuery()) {
                if (rs.next()) {
                    JOptionPane.showMessageDialog(this, "El material ya está registrado");
                    return;  // Detiene el proceso si ya existe
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Salas.class.getName()).log(Level.SEVERE, null, ex);
        }
        String sqlInsert = "INSERT INTO Materiales (Nombre, Descripcion) VALUES (?, ?)";
        try (Connection conn = ConexionDB.obtenerConexion();
            PreparedStatement pstmt = conn.prepareStatement(sqlInsert)) {

            pstmt.setString(1, Ubi);
            pstmt.setString(2, Hard);

            int filasInsertadas = pstmt.executeUpdate();

            if (filasInsertadas > 0) {
                JOptionPane.showMessageDialog(this, "El material fue registrado exitosamente");
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo registrar el material");
                }
            }
        catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error de base de datos: " + ex.getMessage());
        }
    }//GEN-LAST:event_MatNueMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotMat;
    private javax.swing.JComboBox<String> ComMat;
    private javax.swing.JTextArea MatDes;
    private javax.swing.JTextField MatNom;
    private javax.swing.JButton MatNue;
    private javax.swing.JButton SaNue;
    private javax.swing.JTextArea THard;
    private javax.swing.JTextField TUbi;
    private javax.swing.JTable Tabla;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private Clases.PanelRound panelRound1;
    // End of variables declaration//GEN-END:variables

    private void Consulta() {
    String sql = "SELECT S.Ubicacion, AVG(C.Calificacion) AS Promedio " +
                 "FROM Sala S " +
                 "LEFT JOIN Comentario C ON S.Ubicacion = C.Ubi_sala " +
                 "GROUP BY S.Ubicacion";

    try {
        Connection conn = ConexionDB.obtenerConexion();
        PreparedStatement pstmt = conn.prepareStatement(sql);
        ResultSet rs = pstmt.executeQuery();

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Ubicación");
        modelo.addColumn("Promedio");

        while (rs.next()) {
            Object[] fila = new Object[2];
            fila[0] = rs.getString("Ubicacion");

            double promedio = rs.getDouble("Promedio");
            if (rs.wasNull()) {
                fila[1] = "N/A"; // o "Sin calificación"
            } else {
                fila[1] = promedio;
            }

            modelo.addRow(fila);
        }

        Tabla.setModel(modelo);

        rs.close();
        pstmt.close();
        conn.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al consultar: " + e.getMessage());
    }
    }
    
    private void llenarCombo() {
    String sql = "SELECT Nombre FROM Materiales";

    try {
        Connection conn = ConexionDB.obtenerConexion();
        PreparedStatement pstmt = conn.prepareStatement(sql);
        ResultSet rs = pstmt.executeQuery();

        ComMat.removeAllItems(); // Limpia el combo por si ya tenía datos

        while (rs.next()) {
            String nombre = rs.getString("Nombre");
            ComMat.addItem(nombre);
        }

        rs.close();
        pstmt.close();
        conn.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al cargar materiales: " + e.getMessage());
    }
    }

}
