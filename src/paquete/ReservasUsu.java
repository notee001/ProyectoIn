/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package paquete;

import Conexion.ConexionDB;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class ReservasUsu extends javax.swing.JPanel {

    private int documento;
    public ReservasUsu(int documento) {
        this.documento = documento;
        DefaultTableModel model = new DefaultTableModel();
        initComponents();
        Consulta();
    }

    /** 
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        panelRound1 = new Clases.PanelRound();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        BotAce = new javax.swing.JButton();
        TexCal = new javax.swing.JTextField();

        setMinimumSize(new java.awt.Dimension(450, 430));
        setPreferredSize(new java.awt.Dimension(490, 430));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelRound1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ubicacion", "Fecha", "Hora", "Estado"
            }
        ));
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Tabla);

        panelRound1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 330, 350));

        jScrollPane1.setViewportView(panelRound1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 340, 360));

        BotAce.setLabel("Aceptar");
        BotAce.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotAceMouseClicked(evt);
            }
        });
        add(BotAce, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 50, 80, -1));

        TexCal.setForeground(new java.awt.Color(153, 153, 153));
        TexCal.setText("Calificacion");
        TexCal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TexCalMouseClicked(evt);
            }
        });
        add(TexCal, new org.netbeans.lib.awtextra.AbsoluteConstraints(356, 10, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void TexCalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TexCalMouseClicked
        if(TexCal.getText().equals("Calificacion")){
            TexCal.setText("");
            TexCal.setForeground(Color.black);
        }
    }//GEN-LAST:event_TexCalMouseClicked

    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked
        
    }//GEN-LAST:event_TablaMouseClicked

    private void BotAceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotAceMouseClicked
        int filaSeleccionada = Tabla.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar una reserva de la tabla.");
            return;
        }

        String calificacionTexto = TexCal.getText().trim();

        if (calificacionTexto.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debes ingresar una calificación.");
            return;
        }

        int calificacion;
        try {
            calificacion = Integer.parseInt(calificacionTexto);
            if (calificacion < 1 || calificacion > 10) {
                JOptionPane.showMessageDialog(null, "La calificación debe estar entre 1 y 10.");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "La calificación debe ser un número.");
            return;
        }

        String ubicacion = Tabla.getValueAt(filaSeleccionada, 0).toString();

        String sql = "INSERT INTO Comentario (Calificacion, Ubi_sala, ID_documento) VALUES (?, ?, ?)";

        try (Connection conn = ConexionDB.obtenerConexion();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, calificacion);
            pstmt.setString(2, ubicacion);
            pstmt.setInt(3, documento);

            int filasInsertadas = pstmt.executeUpdate();

            if (filasInsertadas > 0) {
                JOptionPane.showMessageDialog(null, "Comentario registrado correctamente.");
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo registrar el comentario.");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al insertar comentario: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_BotAceMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotAce;
    private javax.swing.JTable Tabla;
    private javax.swing.JTextField TexCal;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private Clases.PanelRound panelRound1;
    // End of variables declaration//GEN-END:variables

    private void Consulta() {
        String sql = "SELECT Ubi_sala, Fecha_reserva, Hora_reserva, Estado FROM Reservas WHERE Documento_usu = ?";

        try {
            Connection conn = ConexionDB.obtenerConexion();
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, documento);
            ResultSet rs = pstmt.executeQuery();

            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("Ubicación");
            modelo.addColumn("Fecha");
            modelo.addColumn("Hora");
            modelo.addColumn("Estado");

            while (rs.next()) {
                Object[] fila = new Object[4];
                fila[0] = rs.getString("Ubi_sala");
                fila[1] = rs.getDate("Fecha_reserva");
                fila[2] = rs.getString("Hora_reserva");
                fila[3] = rs.getString("Estado");
                modelo.addRow(fila);
            }

            Tabla.setModel(modelo);

            rs.close();
            pstmt.close();
            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al consultar: " + e.getMessage());
        }
    }
}
